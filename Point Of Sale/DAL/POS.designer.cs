#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Point_Of_Sale.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="POSNew12")]
	public partial class POSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertGift(Gift instance);
    partial void UpdateGift(Gift instance);
    partial void DeleteGift(Gift instance);
    partial void InsertFree_Product(Free_Product instance);
    partial void UpdateFree_Product(Free_Product instance);
    partial void DeleteFree_Product(Free_Product instance);
    partial void InsertBarcode(Barcode instance);
    partial void UpdateBarcode(Barcode instance);
    partial void DeleteBarcode(Barcode instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertTransaction_Supplier(Transaction_Supplier instance);
    partial void UpdateTransaction_Supplier(Transaction_Supplier instance);
    partial void DeleteTransaction_Supplier(Transaction_Supplier instance);
    partial void InsertTransaction_Customer(Transaction_Customer instance);
    partial void UpdateTransaction_Customer(Transaction_Customer instance);
    partial void DeleteTransaction_Customer(Transaction_Customer instance);
    partial void InsertCustomer_Sale(Customer_Sale instance);
    partial void UpdateCustomer_Sale(Customer_Sale instance);
    partial void DeleteCustomer_Sale(Customer_Sale instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProduct_Supplier(Product_Supplier instance);
    partial void UpdateProduct_Supplier(Product_Supplier instance);
    partial void DeleteProduct_Supplier(Product_Supplier instance);
    partial void InsertVoucher(Voucher instance);
    partial void UpdateVoucher(Voucher instance);
    partial void DeleteVoucher(Voucher instance);
    partial void InsertVoucher_Detail(Voucher_Detail instance);
    partial void UpdateVoucher_Detail(Voucher_Detail instance);
    partial void DeleteVoucher_Detail(Voucher_Detail instance);
    partial void InsertSupport(Support instance);
    partial void UpdateSupport(Support instance);
    partial void DeleteSupport(Support instance);
    partial void InsertSub_Account(Sub_Account instance);
    partial void UpdateSub_Account(Sub_Account instance);
    partial void DeleteSub_Account(Sub_Account instance);
    partial void InsertMain_Account(Main_Account instance);
    partial void UpdateMain_Account(Main_Account instance);
    partial void DeleteMain_Account(Main_Account instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    #endregion
		
		public POSDataContext() : 
				base(global::Point_Of_Sale.Properties.Settings.Default.POSNew12ConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public POSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<Gift> Gifts
		{
			get
			{
				return this.GetTable<Gift>();
			}
		}
		
		public System.Data.Linq.Table<Free_Product> Free_Products
		{
			get
			{
				return this.GetTable<Free_Product>();
			}
		}
		
		public System.Data.Linq.Table<Barcode> Barcodes
		{
			get
			{
				return this.GetTable<Barcode>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Transaction_Supplier> Transaction_Suppliers
		{
			get
			{
				return this.GetTable<Transaction_Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Transaction_Customer> Transaction_Customers
		{
			get
			{
				return this.GetTable<Transaction_Customer>();
			}
		}
		
		public System.Data.Linq.Table<Customer_Sale> Customer_Sales
		{
			get
			{
				return this.GetTable<Customer_Sale>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Product_Supplier> Product_Suppliers
		{
			get
			{
				return this.GetTable<Product_Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Voucher> Vouchers
		{
			get
			{
				return this.GetTable<Voucher>();
			}
		}
		
		public System.Data.Linq.Table<Voucher_Detail> Voucher_Details
		{
			get
			{
				return this.GetTable<Voucher_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Support> Supports
		{
			get
			{
				return this.GetTable<Support>();
			}
		}
		
		public System.Data.Linq.Table<Sub_Account> Sub_Accounts
		{
			get
			{
				return this.GetTable<Sub_Account>();
			}
		}
		
		public System.Data.Linq.Table<Main_Account> Main_Accounts
		{
			get
			{
				return this.GetTable<Main_Account>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Phone2;
		
		private string _Address;
		
		private EntitySet<Sale> _Sales;
		
		private EntitySet<Transaction_Customer> _Transaction_Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhone2Changing(System.Nullable<int> value);
    partial void OnPhone2Changed();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Customer()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Transaction_Customers = new EntitySet<Transaction_Customer>(new Action<Transaction_Customer>(this.attach_Transaction_Customers), new Action<Transaction_Customer>(this.detach_Transaction_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="Int")]
		public System.Nullable<int> Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sales", ThisKey="ID", OtherKey="Customer_ID")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Transaction_Customer", Storage="_Transaction_Customers", ThisKey="ID", OtherKey="Customer_ID")]
		public EntitySet<Transaction_Customer> Transaction_Customers
		{
			get
			{
				return this._Transaction_Customers;
			}
			set
			{
				this._Transaction_Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Transaction_Customers(Transaction_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Transaction_Customers(Transaction_Customer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Invoice_ID;
		
		private System.Nullable<int> _Customer_ID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<Free_Product> _Free_Products;
		
		private EntitySet<Customer_Sale> _Customer_Sales;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_IDChanging(int value);
    partial void OnInvoice_IDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<int> value);
    partial void OnCustomer_IDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Sale()
		{
			this._Free_Products = new EntitySet<Free_Product>(new Action<Free_Product>(this.attach_Free_Products), new Action<Free_Product>(this.detach_Free_Products));
			this._Customer_Sales = new EntitySet<Customer_Sale>(new Action<Customer_Sale>(this.attach_Customer_Sales), new Action<Customer_Sale>(this.detach_Customer_Sales));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Invoice_ID
		{
			get
			{
				return this._Invoice_ID;
			}
			set
			{
				if ((this._Invoice_ID != value))
				{
					this.OnInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._Invoice_ID = value;
					this.SendPropertyChanged("Invoice_ID");
					this.OnInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int")]
		public System.Nullable<int> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Free_Product", Storage="_Free_Products", ThisKey="Invoice_ID", OtherKey="Invoice_ID")]
		public EntitySet<Free_Product> Free_Products
		{
			get
			{
				return this._Free_Products;
			}
			set
			{
				this._Free_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Customer_Sale", Storage="_Customer_Sales", ThisKey="Invoice_ID", OtherKey="Invoice_ID")]
		public EntitySet<Customer_Sale> Customer_Sales
		{
			get
			{
				return this._Customer_Sales;
			}
			set
			{
				this._Customer_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="Customer_ID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Free_Products(Free_Product entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_Free_Products(Free_Product entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
		
		private void attach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gift")]
	public partial class Gift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Barcode;
		
		private System.Nullable<int> _Customer_Sale_ID;
		
		private string _SL;
		
		private string _Gift_Code;
		
		private System.Nullable<int> _Discount_Price;
		
		private EntityRef<Barcode> _Barcode1;
		
		private EntityRef<Customer_Sale> _Customer_Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarcodeChanging(string value);
    partial void OnBarcodeChanged();
    partial void OnCustomer_Sale_IDChanging(System.Nullable<int> value);
    partial void OnCustomer_Sale_IDChanged();
    partial void OnSLChanging(string value);
    partial void OnSLChanged();
    partial void OnGift_CodeChanging(string value);
    partial void OnGift_CodeChanged();
    partial void OnDiscount_PriceChanging(System.Nullable<int> value);
    partial void OnDiscount_PriceChanged();
    #endregion
		
		public Gift()
		{
			this._Barcode1 = default(EntityRef<Barcode>);
			this._Customer_Sale = default(EntityRef<Customer_Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Barcode
		{
			get
			{
				return this._Barcode;
			}
			set
			{
				if ((this._Barcode != value))
				{
					if (this._Barcode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarcodeChanging(value);
					this.SendPropertyChanging();
					this._Barcode = value;
					this.SendPropertyChanged("Barcode");
					this.OnBarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Sale_ID", DbType="Int")]
		public System.Nullable<int> Customer_Sale_ID
		{
			get
			{
				return this._Customer_Sale_ID;
			}
			set
			{
				if ((this._Customer_Sale_ID != value))
				{
					if (this._Customer_Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_Sale_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_Sale_ID = value;
					this.SendPropertyChanged("Customer_Sale_ID");
					this.OnCustomer_Sale_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SL", DbType="VarChar(18)")]
		public string SL
		{
			get
			{
				return this._SL;
			}
			set
			{
				if ((this._SL != value))
				{
					this.OnSLChanging(value);
					this.SendPropertyChanging();
					this._SL = value;
					this.SendPropertyChanged("SL");
					this.OnSLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Gift Code]", Storage="_Gift_Code", DbType="VarChar(18)")]
		public string Gift_Code
		{
			get
			{
				return this._Gift_Code;
			}
			set
			{
				if ((this._Gift_Code != value))
				{
					this.OnGift_CodeChanging(value);
					this.SendPropertyChanging();
					this._Gift_Code = value;
					this.SendPropertyChanged("Gift_Code");
					this.OnGift_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Discount Price]", Storage="_Discount_Price", DbType="Int")]
		public System.Nullable<int> Discount_Price
		{
			get
			{
				return this._Discount_Price;
			}
			set
			{
				if ((this._Discount_Price != value))
				{
					this.OnDiscount_PriceChanging(value);
					this.SendPropertyChanging();
					this._Discount_Price = value;
					this.SendPropertyChanged("Discount_Price");
					this.OnDiscount_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barcode_Gift", Storage="_Barcode1", ThisKey="Barcode", OtherKey="Barcode_Serial", IsForeignKey=true)]
		public Barcode Barcode1
		{
			get
			{
				return this._Barcode1.Entity;
			}
			set
			{
				Barcode previousValue = this._Barcode1.Entity;
				if (((previousValue != value) 
							|| (this._Barcode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barcode1.Entity = null;
						previousValue.Gift = null;
					}
					this._Barcode1.Entity = value;
					if ((value != null))
					{
						value.Gift = this;
						this._Barcode = value.Barcode_Serial;
					}
					else
					{
						this._Barcode = default(string);
					}
					this.SendPropertyChanged("Barcode1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale_Gift", Storage="_Customer_Sale", ThisKey="Customer_Sale_ID", OtherKey="ID", IsForeignKey=true)]
		public Customer_Sale Customer_Sale
		{
			get
			{
				return this._Customer_Sale.Entity;
			}
			set
			{
				Customer_Sale previousValue = this._Customer_Sale.Entity;
				if (((previousValue != value) 
							|| (this._Customer_Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer_Sale.Entity = null;
						previousValue.Gifts.Remove(this);
					}
					this._Customer_Sale.Entity = value;
					if ((value != null))
					{
						value.Gifts.Add(this);
						this._Customer_Sale_ID = value.ID;
					}
					else
					{
						this._Customer_Sale_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer_Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Free_Product")]
	public partial class Free_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Invoice_ID;
		
		private System.Nullable<int> _Product_ID;
		
		private EntityRef<Sale> _Sale;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoice_IDChanging(System.Nullable<int> value);
    partial void OnInvoice_IDChanged();
    partial void OnProduct_IDChanging(System.Nullable<int> value);
    partial void OnProduct_IDChanged();
    #endregion
		
		public Free_Product()
		{
			this._Sale = default(EntityRef<Sale>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_ID", DbType="Int")]
		public System.Nullable<int> Invoice_ID
		{
			get
			{
				return this._Invoice_ID;
			}
			set
			{
				if ((this._Invoice_ID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._Invoice_ID = value;
					this.SendPropertyChanged("Invoice_ID");
					this.OnInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int")]
		public System.Nullable<int> Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Free_Product", Storage="_Sale", ThisKey="Invoice_ID", OtherKey="Invoice_ID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.Free_Products.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.Free_Products.Add(this);
						this._Invoice_ID = value.Invoice_ID;
					}
					else
					{
						this._Invoice_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Free_Product", Storage="_Product", ThisKey="Product_ID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Free_Products.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Free_Products.Add(this);
						this._Product_ID = value.ID;
					}
					else
					{
						this._Product_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Barcode")]
	public partial class Barcode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Barcode_Serial;
		
		private System.Nullable<int> _Product_ID;
		
		private string _Color;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Gift> _Gift;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarcode_SerialChanging(string value);
    partial void OnBarcode_SerialChanged();
    partial void OnProduct_IDChanging(System.Nullable<int> value);
    partial void OnProduct_IDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Barcode()
		{
			this._Gift = default(EntityRef<Gift>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barcode_Serial", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Barcode_Serial
		{
			get
			{
				return this._Barcode_Serial;
			}
			set
			{
				if ((this._Barcode_Serial != value))
				{
					this.OnBarcode_SerialChanging(value);
					this.SendPropertyChanging();
					this._Barcode_Serial = value;
					this.SendPropertyChanged("Barcode_Serial");
					this.OnBarcode_SerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int")]
		public System.Nullable<int> Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(15)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barcode_Gift", Storage="_Gift", ThisKey="Barcode_Serial", OtherKey="Barcode", IsUnique=true, IsForeignKey=false)]
		public Gift Gift
		{
			get
			{
				return this._Gift.Entity;
			}
			set
			{
				Gift previousValue = this._Gift.Entity;
				if (((previousValue != value) 
							|| (this._Gift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gift.Entity = null;
						previousValue.Barcode1 = null;
					}
					this._Gift.Entity = value;
					if ((value != null))
					{
						value.Barcode1 = this;
					}
					this.SendPropertyChanged("Gift");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Barcode", Storage="_Product", ThisKey="Product_ID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Barcodes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Barcodes.Add(this);
						this._Product_ID = value.ID;
					}
					else
					{
						this._Product_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _City;
		
		private string _AddressLine;
		
		private string _Postal_Code;
		
		private string _Country;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Fax;
		
		private string _Website;
		
		private EntitySet<Supplier> _Suppliers;
		
		private EntitySet<Login> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressLineChanging(string value);
    partial void OnAddressLineChanged();
    partial void OnPostal_CodeChanging(string value);
    partial void OnPostal_CodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    #endregion
		
		public Address()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(30)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine", DbType="VarChar(100)")]
		public string AddressLine
		{
			get
			{
				return this._AddressLine;
			}
			set
			{
				if ((this._AddressLine != value))
				{
					this.OnAddressLineChanging(value);
					this.SendPropertyChanging();
					this._AddressLine = value;
					this.SendPropertyChanged("AddressLine");
					this.OnAddressLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postal_Code", DbType="VarChar(20)")]
		public string Postal_Code
		{
			get
			{
				return this._Postal_Code;
			}
			set
			{
				if ((this._Postal_Code != value))
				{
					this.OnPostal_CodeChanging(value);
					this.SendPropertyChanging();
					this._Postal_Code = value;
					this.SendPropertyChanged("Postal_Code");
					this.OnPostal_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(30)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone1", DbType="VarChar(20)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="VarChar(20)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Suppliers", ThisKey="ID", OtherKey="Address_ID")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Login", Storage="_Logins", ThisKey="ID", OtherKey="Address_ID")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Address_ID;
		
		private string _Company_Name;
		
		private string _Contact_Name;
		
		private string _Contact_Designation;
		
		private string _Email;
		
		private EntitySet<Transaction_Supplier> _Transaction_Suppliers;
		
		private EntitySet<Product_Supplier> _Product_Suppliers;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddress_IDChanging(int value);
    partial void OnAddress_IDChanged();
    partial void OnCompany_NameChanging(string value);
    partial void OnCompany_NameChanged();
    partial void OnContact_NameChanging(string value);
    partial void OnContact_NameChanged();
    partial void OnContact_DesignationChanging(string value);
    partial void OnContact_DesignationChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Supplier()
		{
			this._Transaction_Suppliers = new EntitySet<Transaction_Supplier>(new Action<Transaction_Supplier>(this.attach_Transaction_Suppliers), new Action<Transaction_Supplier>(this.detach_Transaction_Suppliers));
			this._Product_Suppliers = new EntitySet<Product_Supplier>(new Action<Product_Supplier>(this.attach_Product_Suppliers), new Action<Product_Supplier>(this.detach_Product_Suppliers));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_ID", DbType="Int NOT NULL")]
		public int Address_ID
		{
			get
			{
				return this._Address_ID;
			}
			set
			{
				if ((this._Address_ID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IDChanging(value);
					this.SendPropertyChanging();
					this._Address_ID = value;
					this.SendPropertyChanged("Address_ID");
					this.OnAddress_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Name", DbType="VarChar(50)")]
		public string Company_Name
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompany_NameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("Company_Name");
					this.OnCompany_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact_Name", DbType="VarChar(50)")]
		public string Contact_Name
		{
			get
			{
				return this._Contact_Name;
			}
			set
			{
				if ((this._Contact_Name != value))
				{
					this.OnContact_NameChanging(value);
					this.SendPropertyChanging();
					this._Contact_Name = value;
					this.SendPropertyChanged("Contact_Name");
					this.OnContact_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact_Designation", DbType="VarChar(30)")]
		public string Contact_Designation
		{
			get
			{
				return this._Contact_Designation;
			}
			set
			{
				if ((this._Contact_Designation != value))
				{
					this.OnContact_DesignationChanging(value);
					this.SendPropertyChanging();
					this._Contact_Designation = value;
					this.SendPropertyChanged("Contact_Designation");
					this.OnContact_DesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Transaction_Supplier", Storage="_Transaction_Suppliers", ThisKey="ID", OtherKey="Supplier_ID")]
		public EntitySet<Transaction_Supplier> Transaction_Suppliers
		{
			get
			{
				return this._Transaction_Suppliers;
			}
			set
			{
				this._Transaction_Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product_Supplier", Storage="_Product_Suppliers", ThisKey="ID", OtherKey="Supplier_ID")]
		public EntitySet<Product_Supplier> Product_Suppliers
		{
			get
			{
				return this._Product_Suppliers;
			}
			set
			{
				this._Product_Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Address", ThisKey="Address_ID", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._Address_ID = value.ID;
					}
					else
					{
						this._Address_ID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transaction_Suppliers(Transaction_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Transaction_Suppliers(Transaction_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Product_Suppliers(Product_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Product_Suppliers(Product_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transaction_Supplier")]
	public partial class Transaction_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Supplier_ID;
		
		private string _Type;
		
		private System.Nullable<decimal> _Amount;
		
		private string _DorC;
		
		private string _Ref_No;
		
		private System.Nullable<decimal> _T_Date;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSupplier_IDChanging(System.Nullable<int> value);
    partial void OnSupplier_IDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnDorCChanging(string value);
    partial void OnDorCChanged();
    partial void OnRef_NoChanging(string value);
    partial void OnRef_NoChanged();
    partial void OnT_DateChanging(System.Nullable<decimal> value);
    partial void OnT_DateChanged();
    #endregion
		
		public Transaction_Supplier()
		{
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_ID", DbType="Int")]
		public System.Nullable<int> Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(20)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DorC", DbType="VarChar(10)")]
		public string DorC
		{
			get
			{
				return this._DorC;
			}
			set
			{
				if ((this._DorC != value))
				{
					this.OnDorCChanging(value);
					this.SendPropertyChanging();
					this._DorC = value;
					this.SendPropertyChanged("DorC");
					this.OnDorCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ref_No", DbType="VarChar(40)")]
		public string Ref_No
		{
			get
			{
				return this._Ref_No;
			}
			set
			{
				if ((this._Ref_No != value))
				{
					this.OnRef_NoChanging(value);
					this.SendPropertyChanging();
					this._Ref_No = value;
					this.SendPropertyChanged("Ref_No");
					this.OnRef_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Date", DbType="Money")]
		public System.Nullable<decimal> T_Date
		{
			get
			{
				return this._T_Date;
			}
			set
			{
				if ((this._T_Date != value))
				{
					this.OnT_DateChanging(value);
					this.SendPropertyChanging();
					this._T_Date = value;
					this.SendPropertyChanged("T_Date");
					this.OnT_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Transaction_Supplier", Storage="_Supplier", ThisKey="Supplier_ID", OtherKey="ID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Transaction_Suppliers.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Transaction_Suppliers.Add(this);
						this._Supplier_ID = value.ID;
					}
					else
					{
						this._Supplier_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transaction_Customer")]
	public partial class Transaction_Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Customer_ID;
		
		private string _Type;
		
		private System.Nullable<decimal> _Amount;
		
		private string _DorC;
		
		private string _Ref_No;
		
		private System.Nullable<System.DateTime> _T_Date;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<int> value);
    partial void OnCustomer_IDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnDorCChanging(string value);
    partial void OnDorCChanged();
    partial void OnRef_NoChanging(string value);
    partial void OnRef_NoChanged();
    partial void OnT_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnT_DateChanged();
    #endregion
		
		public Transaction_Customer()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int")]
		public System.Nullable<int> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(20)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DorC", DbType="VarChar(10)")]
		public string DorC
		{
			get
			{
				return this._DorC;
			}
			set
			{
				if ((this._DorC != value))
				{
					this.OnDorCChanging(value);
					this.SendPropertyChanging();
					this._DorC = value;
					this.SendPropertyChanged("DorC");
					this.OnDorCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ref_No", DbType="VarChar(40)")]
		public string Ref_No
		{
			get
			{
				return this._Ref_No;
			}
			set
			{
				if ((this._Ref_No != value))
				{
					this.OnRef_NoChanging(value);
					this.SendPropertyChanging();
					this._Ref_No = value;
					this.SendPropertyChanged("Ref_No");
					this.OnRef_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> T_Date
		{
			get
			{
				return this._T_Date;
			}
			set
			{
				if ((this._T_Date != value))
				{
					this.OnT_DateChanging(value);
					this.SendPropertyChanging();
					this._T_Date = value;
					this.SendPropertyChanged("T_Date");
					this.OnT_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Transaction_Customer", Storage="_Customer", ThisKey="Customer_ID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Transaction_Customers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Transaction_Customers.Add(this);
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer_Sale")]
	public partial class Customer_Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Invoice_ID;
		
		private int _Product_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Unit_Price;
		
		private System.Nullable<int> _Sold_Price;
		
		private System.Nullable<int> _Sale_Price_was;
		
		private string _Sold_By;
		
		private EntitySet<Gift> _Gifts;
		
		private EntityRef<Sale> _Sale;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoice_IDChanging(int value);
    partial void OnInvoice_IDChanged();
    partial void OnProduct_IDChanging(int value);
    partial void OnProduct_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnit_PriceChanging(System.Nullable<int> value);
    partial void OnUnit_PriceChanged();
    partial void OnSold_PriceChanging(System.Nullable<int> value);
    partial void OnSold_PriceChanged();
    partial void OnSale_Price_wasChanging(System.Nullable<int> value);
    partial void OnSale_Price_wasChanged();
    partial void OnSold_ByChanging(string value);
    partial void OnSold_ByChanged();
    #endregion
		
		public Customer_Sale()
		{
			this._Gifts = new EntitySet<Gift>(new Action<Gift>(this.attach_Gifts), new Action<Gift>(this.detach_Gifts));
			this._Sale = default(EntityRef<Sale>);
			this._Product = default(EntityRef<Product>);
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_ID", DbType="Int NOT NULL")]
		public int Invoice_ID
		{
			get
			{
				return this._Invoice_ID;
			}
			set
			{
				if ((this._Invoice_ID != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._Invoice_ID = value;
					this.SendPropertyChanged("Invoice_ID");
					this.OnInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int NOT NULL")]
		public int Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Price", DbType="Int")]
		public System.Nullable<int> Unit_Price
		{
			get
			{
				return this._Unit_Price;
			}
			set
			{
				if ((this._Unit_Price != value))
				{
					this.OnUnit_PriceChanging(value);
					this.SendPropertyChanging();
					this._Unit_Price = value;
					this.SendPropertyChanged("Unit_Price");
					this.OnUnit_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sold_Price", DbType="Int")]
		public System.Nullable<int> Sold_Price
		{
			get
			{
				return this._Sold_Price;
			}
			set
			{
				if ((this._Sold_Price != value))
				{
					this.OnSold_PriceChanging(value);
					this.SendPropertyChanging();
					this._Sold_Price = value;
					this.SendPropertyChanged("Sold_Price");
					this.OnSold_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale_Price_was", DbType="Int")]
		public System.Nullable<int> Sale_Price_was
		{
			get
			{
				return this._Sale_Price_was;
			}
			set
			{
				if ((this._Sale_Price_was != value))
				{
					this.OnSale_Price_wasChanging(value);
					this.SendPropertyChanging();
					this._Sale_Price_was = value;
					this.SendPropertyChanged("Sale_Price_was");
					this.OnSale_Price_wasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sold_By", DbType="VarChar(50)")]
		public string Sold_By
		{
			get
			{
				return this._Sold_By;
			}
			set
			{
				if ((this._Sold_By != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSold_ByChanging(value);
					this.SendPropertyChanging();
					this._Sold_By = value;
					this.SendPropertyChanged("Sold_By");
					this.OnSold_ByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale_Gift", Storage="_Gifts", ThisKey="ID", OtherKey="Customer_Sale_ID")]
		public EntitySet<Gift> Gifts
		{
			get
			{
				return this._Gifts;
			}
			set
			{
				this._Gifts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Customer_Sale", Storage="_Sale", ThisKey="Invoice_ID", OtherKey="Invoice_ID", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.Customer_Sales.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.Customer_Sales.Add(this);
						this._Invoice_ID = value.Invoice_ID;
					}
					else
					{
						this._Invoice_ID = default(int);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Customer_Sale", Storage="_Product", ThisKey="Product_ID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Customer_Sales.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Customer_Sales.Add(this);
						this._Product_ID = value.ID;
					}
					else
					{
						this._Product_ID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Customer_Sale", Storage="_Login", ThisKey="Sold_By", OtherKey="Username", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.Customer_Sales.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.Customer_Sales.Add(this);
						this._Sold_By = value.Username;
					}
					else
					{
						this._Sold_By = default(string);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gifts(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Customer_Sale = this;
		}
		
		private void detach_Gifts(Gift entity)
		{
			this.SendPropertyChanging();
			entity.Customer_Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private string _Model;
		
		private System.Nullable<int> _Quantity_Available;
		
		private System.Nullable<int> _Quantity_Sold;
		
		private System.Nullable<int> _Unit_Price;
		
		private System.Nullable<int> _Selling_Price;
		
		private string _Des;
		
		private System.Nullable<System.DateTime> _Date_Updated;
		
		private string _Unique_Barcode;
		
		private EntitySet<Free_Product> _Free_Products;
		
		private EntitySet<Barcode> _Barcodes;
		
		private EntitySet<Customer_Sale> _Customer_Sales;
		
		private EntitySet<Product_Supplier> _Product_Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnQuantity_AvailableChanging(System.Nullable<int> value);
    partial void OnQuantity_AvailableChanged();
    partial void OnQuantity_SoldChanging(System.Nullable<int> value);
    partial void OnQuantity_SoldChanged();
    partial void OnUnit_PriceChanging(System.Nullable<int> value);
    partial void OnUnit_PriceChanged();
    partial void OnSelling_PriceChanging(System.Nullable<int> value);
    partial void OnSelling_PriceChanged();
    partial void OnDesChanging(string value);
    partial void OnDesChanged();
    partial void OnDate_UpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_UpdatedChanged();
    partial void OnUnique_BarcodeChanging(string value);
    partial void OnUnique_BarcodeChanged();
    #endregion
		
		public Product()
		{
			this._Free_Products = new EntitySet<Free_Product>(new Action<Free_Product>(this.attach_Free_Products), new Action<Free_Product>(this.detach_Free_Products));
			this._Barcodes = new EntitySet<Barcode>(new Action<Barcode>(this.attach_Barcodes), new Action<Barcode>(this.detach_Barcodes));
			this._Customer_Sales = new EntitySet<Customer_Sale>(new Action<Customer_Sale>(this.attach_Customer_Sales), new Action<Customer_Sale>(this.detach_Customer_Sales));
			this._Product_Suppliers = new EntitySet<Product_Supplier>(new Action<Product_Supplier>(this.attach_Product_Suppliers), new Action<Product_Supplier>(this.detach_Product_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(25)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(30)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_Available", DbType="Int")]
		public System.Nullable<int> Quantity_Available
		{
			get
			{
				return this._Quantity_Available;
			}
			set
			{
				if ((this._Quantity_Available != value))
				{
					this.OnQuantity_AvailableChanging(value);
					this.SendPropertyChanging();
					this._Quantity_Available = value;
					this.SendPropertyChanged("Quantity_Available");
					this.OnQuantity_AvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_Sold", DbType="Int")]
		public System.Nullable<int> Quantity_Sold
		{
			get
			{
				return this._Quantity_Sold;
			}
			set
			{
				if ((this._Quantity_Sold != value))
				{
					this.OnQuantity_SoldChanging(value);
					this.SendPropertyChanging();
					this._Quantity_Sold = value;
					this.SendPropertyChanged("Quantity_Sold");
					this.OnQuantity_SoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Price", DbType="Int")]
		public System.Nullable<int> Unit_Price
		{
			get
			{
				return this._Unit_Price;
			}
			set
			{
				if ((this._Unit_Price != value))
				{
					this.OnUnit_PriceChanging(value);
					this.SendPropertyChanging();
					this._Unit_Price = value;
					this.SendPropertyChanged("Unit_Price");
					this.OnUnit_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Selling_Price", DbType="Int")]
		public System.Nullable<int> Selling_Price
		{
			get
			{
				return this._Selling_Price;
			}
			set
			{
				if ((this._Selling_Price != value))
				{
					this.OnSelling_PriceChanging(value);
					this.SendPropertyChanging();
					this._Selling_Price = value;
					this.SendPropertyChanged("Selling_Price");
					this.OnSelling_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Des", DbType="VarChar(70)")]
		public string Des
		{
			get
			{
				return this._Des;
			}
			set
			{
				if ((this._Des != value))
				{
					this.OnDesChanging(value);
					this.SendPropertyChanging();
					this._Des = value;
					this.SendPropertyChanged("Des");
					this.OnDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Updated
		{
			get
			{
				return this._Date_Updated;
			}
			set
			{
				if ((this._Date_Updated != value))
				{
					this.OnDate_UpdatedChanging(value);
					this.SendPropertyChanging();
					this._Date_Updated = value;
					this.SendPropertyChanged("Date_Updated");
					this.OnDate_UpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unique_Barcode", DbType="Char(3)")]
		public string Unique_Barcode
		{
			get
			{
				return this._Unique_Barcode;
			}
			set
			{
				if ((this._Unique_Barcode != value))
				{
					this.OnUnique_BarcodeChanging(value);
					this.SendPropertyChanging();
					this._Unique_Barcode = value;
					this.SendPropertyChanged("Unique_Barcode");
					this.OnUnique_BarcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Free_Product", Storage="_Free_Products", ThisKey="ID", OtherKey="Product_ID")]
		public EntitySet<Free_Product> Free_Products
		{
			get
			{
				return this._Free_Products;
			}
			set
			{
				this._Free_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Barcode", Storage="_Barcodes", ThisKey="ID", OtherKey="Product_ID")]
		public EntitySet<Barcode> Barcodes
		{
			get
			{
				return this._Barcodes;
			}
			set
			{
				this._Barcodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Customer_Sale", Storage="_Customer_Sales", ThisKey="ID", OtherKey="Product_ID")]
		public EntitySet<Customer_Sale> Customer_Sales
		{
			get
			{
				return this._Customer_Sales;
			}
			set
			{
				this._Customer_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Supplier", Storage="_Product_Suppliers", ThisKey="ID", OtherKey="Product_ID")]
		public EntitySet<Product_Supplier> Product_Suppliers
		{
			get
			{
				return this._Product_Suppliers;
			}
			set
			{
				this._Product_Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Free_Products(Free_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Free_Products(Free_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Barcodes(Barcode entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Product_Suppliers(Product_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Product_Suppliers(Product_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product_Supplier")]
	public partial class Product_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Ref_Number;
		
		private System.Nullable<int> _Product_ID;
		
		private System.Nullable<int> _Supplier_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRef_NumberChanging(string value);
    partial void OnRef_NumberChanged();
    partial void OnProduct_IDChanging(System.Nullable<int> value);
    partial void OnProduct_IDChanged();
    partial void OnSupplier_IDChanging(System.Nullable<int> value);
    partial void OnSupplier_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Product_Supplier()
		{
			this._Product = default(EntityRef<Product>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ref_Number", DbType="VarChar(50)")]
		public string Ref_Number
		{
			get
			{
				return this._Ref_Number;
			}
			set
			{
				if ((this._Ref_Number != value))
				{
					this.OnRef_NumberChanging(value);
					this.SendPropertyChanging();
					this._Ref_Number = value;
					this.SendPropertyChanged("Ref_Number");
					this.OnRef_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="Int")]
		public System.Nullable<int> Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_ID", DbType="Int")]
		public System.Nullable<int> Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Product_Supplier", Storage="_Product", ThisKey="Product_ID", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Product_Suppliers.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Product_Suppliers.Add(this);
						this._Product_ID = value.ID;
					}
					else
					{
						this._Product_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product_Supplier", Storage="_Supplier", ThisKey="Supplier_ID", OtherKey="ID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Product_Suppliers.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Product_Suppliers.Add(this);
						this._Supplier_ID = value.ID;
					}
					else
					{
						this._Supplier_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher")]
	public partial class Voucher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _Sub_Account_ID;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<int> _PreparedBy;
		
		private System.Nullable<int> _AuthenticatedBy;
		
		private EntitySet<Voucher_Detail> _Voucher_Details;
		
		private EntitySet<Support> _Supports;
		
		private EntityRef<Sub_Account> _Sub_Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnSub_Account_IDChanging(System.Nullable<int> value);
    partial void OnSub_Account_IDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnPreparedByChanging(System.Nullable<int> value);
    partial void OnPreparedByChanged();
    partial void OnAuthenticatedByChanging(System.Nullable<int> value);
    partial void OnAuthenticatedByChanged();
    #endregion
		
		public Voucher()
		{
			this._Voucher_Details = new EntitySet<Voucher_Detail>(new Action<Voucher_Detail>(this.attach_Voucher_Details), new Action<Voucher_Detail>(this.detach_Voucher_Details));
			this._Supports = new EntitySet<Support>(new Action<Support>(this.attach_Supports), new Action<Support>(this.detach_Supports));
			this._Sub_Account = default(EntityRef<Sub_Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub_Account_ID", DbType="Int")]
		public System.Nullable<int> Sub_Account_ID
		{
			get
			{
				return this._Sub_Account_ID;
			}
			set
			{
				if ((this._Sub_Account_ID != value))
				{
					if (this._Sub_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSub_Account_IDChanging(value);
					this.SendPropertyChanging();
					this._Sub_Account_ID = value;
					this.SendPropertyChanged("Sub_Account_ID");
					this.OnSub_Account_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreparedBy", DbType="Int")]
		public System.Nullable<int> PreparedBy
		{
			get
			{
				return this._PreparedBy;
			}
			set
			{
				if ((this._PreparedBy != value))
				{
					this.OnPreparedByChanging(value);
					this.SendPropertyChanging();
					this._PreparedBy = value;
					this.SendPropertyChanged("PreparedBy");
					this.OnPreparedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthenticatedBy", DbType="Int")]
		public System.Nullable<int> AuthenticatedBy
		{
			get
			{
				return this._AuthenticatedBy;
			}
			set
			{
				if ((this._AuthenticatedBy != value))
				{
					this.OnAuthenticatedByChanging(value);
					this.SendPropertyChanging();
					this._AuthenticatedBy = value;
					this.SendPropertyChanged("AuthenticatedBy");
					this.OnAuthenticatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Voucher_Detail", Storage="_Voucher_Details", ThisKey="ID", OtherKey="Voucher_ID")]
		public EntitySet<Voucher_Detail> Voucher_Details
		{
			get
			{
				return this._Voucher_Details;
			}
			set
			{
				this._Voucher_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Support", Storage="_Supports", ThisKey="ID", OtherKey="Voucher_ID")]
		public EntitySet<Support> Supports
		{
			get
			{
				return this._Supports;
			}
			set
			{
				this._Supports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sub_Account_Voucher", Storage="_Sub_Account", ThisKey="Sub_Account_ID", OtherKey="ID", IsForeignKey=true)]
		public Sub_Account Sub_Account
		{
			get
			{
				return this._Sub_Account.Entity;
			}
			set
			{
				Sub_Account previousValue = this._Sub_Account.Entity;
				if (((previousValue != value) 
							|| (this._Sub_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sub_Account.Entity = null;
						previousValue.Vouchers.Remove(this);
					}
					this._Sub_Account.Entity = value;
					if ((value != null))
					{
						value.Vouchers.Add(this);
						this._Sub_Account_ID = value.ID;
					}
					else
					{
						this._Sub_Account_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sub_Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Voucher_Details(Voucher_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_Voucher_Details(Voucher_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
		
		private void attach_Supports(Support entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = this;
		}
		
		private void detach_Supports(Support entity)
		{
			this.SendPropertyChanging();
			entity.Voucher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voucher_Details")]
	public partial class Voucher_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Voucher_ID;
		
		private System.Nullable<int> _SNO;
		
		private System.Nullable<int> _Sub_Account_ID;
		
		private System.Nullable<decimal> _Amount;
		
		private string _Narration;
		
		private EntityRef<Voucher> _Voucher;
		
		private EntityRef<Sub_Account> _Sub_Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucher_IDChanging(System.Nullable<int> value);
    partial void OnVoucher_IDChanged();
    partial void OnSNOChanging(System.Nullable<int> value);
    partial void OnSNOChanged();
    partial void OnSub_Account_IDChanging(System.Nullable<int> value);
    partial void OnSub_Account_IDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnNarrationChanging(string value);
    partial void OnNarrationChanged();
    #endregion
		
		public Voucher_Detail()
		{
			this._Voucher = default(EntityRef<Voucher>);
			this._Sub_Account = default(EntityRef<Sub_Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voucher_ID", DbType="Int")]
		public System.Nullable<int> Voucher_ID
		{
			get
			{
				return this._Voucher_ID;
			}
			set
			{
				if ((this._Voucher_ID != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucher_IDChanging(value);
					this.SendPropertyChanging();
					this._Voucher_ID = value;
					this.SendPropertyChanged("Voucher_ID");
					this.OnVoucher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SNO", DbType="Int")]
		public System.Nullable<int> SNO
		{
			get
			{
				return this._SNO;
			}
			set
			{
				if ((this._SNO != value))
				{
					this.OnSNOChanging(value);
					this.SendPropertyChanging();
					this._SNO = value;
					this.SendPropertyChanged("SNO");
					this.OnSNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sub_Account_ID", DbType="Int")]
		public System.Nullable<int> Sub_Account_ID
		{
			get
			{
				return this._Sub_Account_ID;
			}
			set
			{
				if ((this._Sub_Account_ID != value))
				{
					if (this._Sub_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSub_Account_IDChanging(value);
					this.SendPropertyChanging();
					this._Sub_Account_ID = value;
					this.SendPropertyChanged("Sub_Account_ID");
					this.OnSub_Account_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Narration", DbType="VarChar(100)")]
		public string Narration
		{
			get
			{
				return this._Narration;
			}
			set
			{
				if ((this._Narration != value))
				{
					this.OnNarrationChanging(value);
					this.SendPropertyChanging();
					this._Narration = value;
					this.SendPropertyChanged("Narration");
					this.OnNarrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Voucher_Detail", Storage="_Voucher", ThisKey="Voucher_ID", OtherKey="ID", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.Voucher_Details.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.Voucher_Details.Add(this);
						this._Voucher_ID = value.ID;
					}
					else
					{
						this._Voucher_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sub_Account_Voucher_Detail", Storage="_Sub_Account", ThisKey="Sub_Account_ID", OtherKey="ID", IsForeignKey=true)]
		public Sub_Account Sub_Account
		{
			get
			{
				return this._Sub_Account.Entity;
			}
			set
			{
				Sub_Account previousValue = this._Sub_Account.Entity;
				if (((previousValue != value) 
							|| (this._Sub_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sub_Account.Entity = null;
						previousValue.Voucher_Details.Remove(this);
					}
					this._Sub_Account.Entity = value;
					if ((value != null))
					{
						value.Voucher_Details.Add(this);
						this._Sub_Account_ID = value.ID;
					}
					else
					{
						this._Sub_Account_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sub_Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Support")]
	public partial class Support : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Voucher_ID;
		
		private string _Name;
		
		private EntityRef<Voucher> _Voucher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucher_IDChanging(System.Nullable<int> value);
    partial void OnVoucher_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Support()
		{
			this._Voucher = default(EntityRef<Voucher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voucher_ID", DbType="Int")]
		public System.Nullable<int> Voucher_ID
		{
			get
			{
				return this._Voucher_ID;
			}
			set
			{
				if ((this._Voucher_ID != value))
				{
					if (this._Voucher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucher_IDChanging(value);
					this.SendPropertyChanging();
					this._Voucher_ID = value;
					this.SendPropertyChanged("Voucher_ID");
					this.OnVoucher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voucher_Support", Storage="_Voucher", ThisKey="Voucher_ID", OtherKey="ID", IsForeignKey=true)]
		public Voucher Voucher
		{
			get
			{
				return this._Voucher.Entity;
			}
			set
			{
				Voucher previousValue = this._Voucher.Entity;
				if (((previousValue != value) 
							|| (this._Voucher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher.Entity = null;
						previousValue.Supports.Remove(this);
					}
					this._Voucher.Entity = value;
					if ((value != null))
					{
						value.Supports.Add(this);
						this._Voucher_ID = value.ID;
					}
					else
					{
						this._Voucher_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Voucher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sub_Accounts")]
	public partial class Sub_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Main_Accounts_ID;
		
		private EntitySet<Voucher> _Vouchers;
		
		private EntitySet<Voucher_Detail> _Voucher_Details;
		
		private EntityRef<Main_Account> _Main_Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMain_Accounts_IDChanging(System.Nullable<int> value);
    partial void OnMain_Accounts_IDChanged();
    #endregion
		
		public Sub_Account()
		{
			this._Vouchers = new EntitySet<Voucher>(new Action<Voucher>(this.attach_Vouchers), new Action<Voucher>(this.detach_Vouchers));
			this._Voucher_Details = new EntitySet<Voucher_Detail>(new Action<Voucher_Detail>(this.attach_Voucher_Details), new Action<Voucher_Detail>(this.detach_Voucher_Details));
			this._Main_Account = default(EntityRef<Main_Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Main_Accounts_ID", DbType="Int")]
		public System.Nullable<int> Main_Accounts_ID
		{
			get
			{
				return this._Main_Accounts_ID;
			}
			set
			{
				if ((this._Main_Accounts_ID != value))
				{
					if (this._Main_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMain_Accounts_IDChanging(value);
					this.SendPropertyChanging();
					this._Main_Accounts_ID = value;
					this.SendPropertyChanged("Main_Accounts_ID");
					this.OnMain_Accounts_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sub_Account_Voucher", Storage="_Vouchers", ThisKey="ID", OtherKey="Sub_Account_ID")]
		public EntitySet<Voucher> Vouchers
		{
			get
			{
				return this._Vouchers;
			}
			set
			{
				this._Vouchers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sub_Account_Voucher_Detail", Storage="_Voucher_Details", ThisKey="ID", OtherKey="Sub_Account_ID")]
		public EntitySet<Voucher_Detail> Voucher_Details
		{
			get
			{
				return this._Voucher_Details;
			}
			set
			{
				this._Voucher_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Main_Account_Sub_Account", Storage="_Main_Account", ThisKey="Main_Accounts_ID", OtherKey="ID", IsForeignKey=true)]
		public Main_Account Main_Account
		{
			get
			{
				return this._Main_Account.Entity;
			}
			set
			{
				Main_Account previousValue = this._Main_Account.Entity;
				if (((previousValue != value) 
							|| (this._Main_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Main_Account.Entity = null;
						previousValue.Sub_Accounts.Remove(this);
					}
					this._Main_Account.Entity = value;
					if ((value != null))
					{
						value.Sub_Accounts.Add(this);
						this._Main_Accounts_ID = value.ID;
					}
					else
					{
						this._Main_Accounts_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Main_Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Sub_Account = this;
		}
		
		private void detach_Vouchers(Voucher entity)
		{
			this.SendPropertyChanging();
			entity.Sub_Account = null;
		}
		
		private void attach_Voucher_Details(Voucher_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Sub_Account = this;
		}
		
		private void detach_Voucher_Details(Voucher_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Sub_Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Main_Accounts")]
	public partial class Main_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Catagory;
		
		private EntitySet<Sub_Account> _Sub_Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCatagoryChanging(string value);
    partial void OnCatagoryChanged();
    #endregion
		
		public Main_Account()
		{
			this._Sub_Accounts = new EntitySet<Sub_Account>(new Action<Sub_Account>(this.attach_Sub_Accounts), new Action<Sub_Account>(this.detach_Sub_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Catagory", DbType="VarChar(50)")]
		public string Catagory
		{
			get
			{
				return this._Catagory;
			}
			set
			{
				if ((this._Catagory != value))
				{
					this.OnCatagoryChanging(value);
					this.SendPropertyChanging();
					this._Catagory = value;
					this.SendPropertyChanged("Catagory");
					this.OnCatagoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Main_Account_Sub_Account", Storage="_Sub_Accounts", ThisKey="ID", OtherKey="Main_Accounts_ID")]
		public EntitySet<Sub_Account> Sub_Accounts
		{
			get
			{
				return this._Sub_Accounts;
			}
			set
			{
				this._Sub_Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sub_Accounts(Sub_Account entity)
		{
			this.SendPropertyChanging();
			entity.Main_Account = this;
		}
		
		private void detach_Sub_Accounts(Sub_Account entity)
		{
			this.SendPropertyChanging();
			entity.Main_Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _Last_Login;
		
		private string _User_Type;
		
		private System.Nullable<int> _Address_ID;
		
		private string _Mobile;
		
		private System.Nullable<int> _Manager_ID;
		
		private EntitySet<Customer_Sale> _Customer_Sales;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLast_LoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_LoginChanged();
    partial void OnUser_TypeChanging(string value);
    partial void OnUser_TypeChanged();
    partial void OnAddress_IDChanging(System.Nullable<int> value);
    partial void OnAddress_IDChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnManager_IDChanging(System.Nullable<int> value);
    partial void OnManager_IDChanged();
    #endregion
		
		public Login()
		{
			this._Customer_Sales = new EntitySet<Customer_Sale>(new Action<Customer_Sale>(this.attach_Customer_Sales), new Action<Customer_Sale>(this.detach_Customer_Sales));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Login", DbType="DateTime")]
		public System.Nullable<System.DateTime> Last_Login
		{
			get
			{
				return this._Last_Login;
			}
			set
			{
				if ((this._Last_Login != value))
				{
					this.OnLast_LoginChanging(value);
					this.SendPropertyChanging();
					this._Last_Login = value;
					this.SendPropertyChanged("Last_Login");
					this.OnLast_LoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Type", DbType="VarChar(50)")]
		public string User_Type
		{
			get
			{
				return this._User_Type;
			}
			set
			{
				if ((this._User_Type != value))
				{
					this.OnUser_TypeChanging(value);
					this.SendPropertyChanging();
					this._User_Type = value;
					this.SendPropertyChanged("User_Type");
					this.OnUser_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_ID", DbType="Int")]
		public System.Nullable<int> Address_ID
		{
			get
			{
				return this._Address_ID;
			}
			set
			{
				if ((this._Address_ID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddress_IDChanging(value);
					this.SendPropertyChanging();
					this._Address_ID = value;
					this.SendPropertyChanged("Address_ID");
					this.OnAddress_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="Int")]
		public System.Nullable<int> Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_Customer_Sale", Storage="_Customer_Sales", ThisKey="Username", OtherKey="Sold_By")]
		public EntitySet<Customer_Sale> Customer_Sales
		{
			get
			{
				return this._Customer_Sales;
			}
			set
			{
				this._Customer_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Login", Storage="_Address", ThisKey="Address_ID", OtherKey="ID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._Address_ID = value.ID;
					}
					else
					{
						this._Address_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_Customer_Sales(Customer_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
}
#pragma warning restore 1591
